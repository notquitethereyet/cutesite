---
import DesktopIcon from './DesktopIcon.astro';
import DarkModeToggle from './DarkModeToggle.astro';
import Window from './Window.astro';
import CherryBlossoms from './CherryBlossoms.astro';
import { Image } from 'astro:assets';
import { userName, currentYear } from '../utils/siteConfig';

// Greeting logic based on current hour
const hour = new Date().getHours();
let jpGreeting = 'こんにちは！'; // Default: Konnichiwa
if (hour < 5) jpGreeting = 'こんばんは！'; // Konbanwa (Good evening/night)
else if (hour < 11) jpGreeting = 'おはよう！'; // Ohayou (Good morning)
else if (hour >= 18) jpGreeting = 'こんばんは！'; // Konbanwa (Good evening)

const base = import.meta.env.BASE_URL ?? '/';
---

<div class="flex flex-col h-screen relative bg-background dark:bg-background-dark">
  <!-- Decorations - both sakura and lily -->
  <div class="sakura-decoration">
    <Image src={`${base}images/sakura.webp`} alt="Sakura branch decoration" width={400} height={300} />
  </div>

  <div class="lily-decoration hidden">
    <Image src={`${base}images/lily.webp`} alt="Lily decoration 1" class="lily-1" width={300} height={200} />
    <Image src={`${base}images/lily.webp`} alt="Lily decoration 2" class="lily-2" width={250} height={180} />
  </div>

  <!-- Cherry blossoms animation -->
  <CherryBlossoms />

  <!-- Top bar with controls -->
  <div class="absolute top-2.5 left-2.5 z-10">
    <DarkModeToggle />
  </div>

  <!-- Main desktop area -->
  <div class="flex-1 flex flex-col justify-center items-center p-5">
    <!-- Desktop area is now empty as icons are moved to the home window -->
  </div>

  <!-- Windows container (windows will be created dynamically) -->
  <div id="windows-container" class="absolute top-0 left-0 w-full h-full pointer-events-none" role="presentation" aria-hidden="true"></div>

  <!-- Lain video background for secret mode -->
  <video
    id="lain-bg-video"
    autoplay
    loop
    muted
    playsinline
    class="fixed top-0 left-0 w-full h-full object-cover z-0 hidden"
    style="pointer-events: none;"
  >
    <source src={`${base}images/lain.webm`} type="video/webm" />
  </video>

  <!-- Hidden controller for Konami code (initially hidden) -->
  <div id="konami-controller" class="hidden fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-black p-4 rounded-lg shadow-lg z-50 w-80 border-2 border-red-600" role="dialog" aria-modal="true" aria-label="Konami Code Controller">
    <div class="flex justify-between items-center mb-4">
      <h2 class="text-lg font-bold text-red-500" id="controller-title">Controller</h2>
      <button id="controller-close" class="text-red-500 hover:text-red-300" aria-label="Close controller">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
          <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
        </svg>
      </button>
    </div>

    <div class="flex flex-col items-center">
      <div class="w-32 h-32 rounded-full overflow-hidden mb-4 border-2 border-red-600">
        <video
          src={`${base}images/glitch.webm`}
          autoplay
          loop
          muted
          playsinline
          class="w-full h-full object-cover"
          width="128" height="128"
        ></video>
      </div>

      <div id="sequence-dots" class="flex justify-center space-x-1 mb-4" aria-label="Konami code sequence progress">
        <div class="w-2 h-2 rounded-full bg-red-900"></div>
        <div class="w-2 h-2 rounded-full bg-red-900"></div>
        <div class="w-2 h-2 rounded-full bg-red-900"></div>
        <div class="w-2 h-2 rounded-full bg-red-900"></div>
        <div class="w-2 h-2 rounded-full bg-red-900"></div>
        <div class="w-2 h-2 rounded-full bg-red-900"></div>
        <div class="w-2 h-2 rounded-full bg-red-900"></div>
        <div class="w-2 h-2 rounded-full bg-red-900"></div>
        <div class="w-2 h-2 rounded-full bg-red-900"></div>
        <div class="w-2 h-2 rounded-full bg-red-900"></div>
      </div>

      <div class="controller-buttons w-full" role="group" aria-label="Controller buttons">
        <!-- D-pad -->
        <div class="grid grid-cols-3 gap-2 mb-4">
          <div></div>
          <button id="btn-up" class="bg-red-900 text-red-100 p-2 rounded hover:bg-red-700" aria-label="Up">↑</button>
          <div></div>
          <button id="btn-left" class="bg-red-900 text-red-100 p-2 rounded hover:bg-red-700" aria-label="Left">←</button>
          <div></div>
          <button id="btn-right" class="bg-red-900 text-red-100 p-2 rounded hover:bg-red-700" aria-label="Right">→</button>
          <div></div>
          <button id="btn-down" class="bg-red-900 text-red-100 p-2 rounded hover:bg-red-700" aria-label="Down">↓</button>
          <div></div>
        </div>

        <!-- A/B buttons -->
        <div class="flex justify-center space-x-4">
          <button id="btn-b" class="bg-black text-red-500 w-12 h-12 rounded-full hover:bg-gray-900 border-2 border-red-600" aria-label="B button">B</button>
          <button id="btn-a" class="bg-red-900 text-red-100 w-12 h-12 rounded-full hover:bg-red-700" aria-label="A button">A</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Footer -->
  <div class="absolute bottom-0 left-0 w-full p-4 flex flex-col items-center">
    <div class="text-sm text-text dark:text-text-dark opacity-80 z-10">&copy; {currentYear} {userName}</div>
  </div>
</div>

<!-- Home window (visible on load) -->
<Window id="home" title="Home">
  <div class="flex flex-col items-center mb-6">
    <span class="text-3xl font-semibold" lang="ja" title="Greeting" style="color: var(--text-color);">{jpGreeting}</span>
  </div>
  <div class="desktop-icons grid grid-cols-2 gap-12">
    <DesktopIcon id="about" name="about" />
    <DesktopIcon id="links" name="links" />
    <DesktopIcon id="work" name="work" />
    <DesktopIcon id="faq" name="faq" />
  </div>
</Window>

<!-- Window template for dynamic content -->
<template id="window-template">
  <Window id="" title="" isTemplate={true} />
</template>

<script>
  import { initIcons } from '../utils/iconManager';
  import { repositionWindows, getBasePath, openWindow, closeWindow } from '../utils/windowManager';
  import { initTouchSupport } from '../utils/touchSupport';
  import { initAudio, playSound } from '../utils/audioManager';

  // Initialize dark mode state
  let isDarkMode: boolean = false;

  // Check for saved preference
  const savedDarkMode = localStorage.getItem('darkMode');
  if (savedDarkMode !== null) {
    isDarkMode = savedDarkMode === 'true';
  } else {
    // Default to user's system preference
    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    isDarkMode = prefersDark;
    localStorage.setItem('darkMode', String(prefersDark));
  }

  // Apply dark mode class if needed
  if (isDarkMode) {
    document.documentElement.classList.add('dark');
  } else {
    document.documentElement.classList.remove('dark');
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    initIcons();
    initTouchSupport();
    initAudio(); // Initialize audio functionality

    // Position windows in the center initially
    window.addEventListener('resize', repositionWindows);

    // Show home window on load
    const homeWindow = document.getElementById('home-window');
    if (homeWindow) {
      setTimeout(() => {
        homeWindow.classList.add('active');
        // Set a base z-index for the home window
        // Other windows will appear in front of it
        homeWindow.style.zIndex = '5';

        // Ensure home window title bar has solid background color
        const homeTitleBar = homeWindow.querySelector('.bg-secondary') as HTMLElement;
        if (homeTitleBar) {
          homeTitleBar.style.backgroundColor = getComputedStyle(document.documentElement).getPropertyValue('--window-title-bg');
        }
      }, 300);
    }

    // Konami code implementation
    function initKonamiCode() {
      // Konami code sequence: ↑ ↑ ↓ ↓ ← → ← → B A
      const konamiCode = ['ArrowUp', 'ArrowUp', 'ArrowDown', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'ArrowLeft', 'ArrowRight', 'b', 'a'];
      let konamiIndex = 0;

      // Controller variables
      let controllerVisible = false;

      // Helper function to open the autism window
      function crashOut() {
        // Reset the index
        konamiIndex = 0;

        // Hide controller if it's visible
        if (controllerVisible) {
          // Hide controller but don't remove Lain background
          const controller = document.getElementById('konami-controller');
          if (controller) {
            controller.classList.add('hidden');
            controllerVisible = false;
            konamiIndex = 0;
            // Note: We intentionally don't remove the lain-background class here
          }
        }

        // Play glitch sound effect on crashOut (Konami code success)
        playSound('glitch');

        // Open the autism window
        openWindow('autism');
        // Play window open sound
        playSound('windowOpen');

        // Add a special effect
        const body = document.querySelector('body');
        if (body) {
          body.classList.add('konami-activated');

          // Ensure Lain background is applied
          // setBackground('lain');

          // Flash effect
          setTimeout(() => {
            body.classList.remove('konami-activated');
          }, 1000);
        }
      }

      // Controller functions
      function showController() {
        const controller = document.getElementById('konami-controller');
        if (controller) {
          controller.classList.remove('hidden');
          controllerVisible = true;
          resetSequenceDots();

          // Add Lain background when controller is shown
          // setBackground('lain');

          // Toggle decorations
          // setDecoration('lily');
        }
      }

      function hideController() {
        const controller = document.getElementById('konami-controller');
        if (controller) {
          controller.classList.add('hidden');
          controllerVisible = false;
          konamiIndex = 0;
          // Remove Lain background when controller is hidden
          // setBackground('default');
          // Check if autism window is open before toggling decorations back
          const autismWindow = document.querySelector('.window[data-window-id="autism"]');
          if (!autismWindow) {
            // setDecoration('sakura');
          }
          // Use modular getBasePath() for redirect
          window.location.assign(window.location.origin + getBasePath());
        }
      }

      // Helper function to update sequence dots
      function updateSequenceDots() {
        const dots = document.querySelectorAll('#sequence-dots div');
        for (let i = 0; i < dots.length; i++) {
          if (i < konamiIndex) {
            dots[i].classList.remove('bg-red-900');
            dots[i].classList.add('bg-red-500');
          } else {
            dots[i].classList.remove('bg-red-500');
            dots[i].classList.add('bg-red-900');
          }
        }
      }

      // Helper function to reset sequence dots
      function resetSequenceDots() {
        const dots = document.querySelectorAll('#sequence-dots div');
        dots.forEach(dot => {
          dot.classList.remove('bg-red-500');
          dot.classList.add('bg-red-900');
        });
        konamiIndex = 0;
      }

      // Initialize controller buttons
      function initControllerButtons() {
        // D-pad buttons
        document.getElementById('btn-up')?.addEventListener('click', () => handleControllerButton('ArrowUp'));
        document.getElementById('btn-down')?.addEventListener('click', () => handleControllerButton('ArrowDown'));
        document.getElementById('btn-left')?.addEventListener('click', () => handleControllerButton('ArrowLeft'));
        document.getElementById('btn-right')?.addEventListener('click', () => handleControllerButton('ArrowRight'));

        // A/B buttons
        document.getElementById('btn-a')?.addEventListener('click', () => handleControllerButton('a'));
        document.getElementById('btn-b')?.addEventListener('click', () => handleControllerButton('b'));

        // Close button
        document.getElementById('controller-close')?.addEventListener('click', hideController);
      }

      function handleControllerButton(key: string) {
        // Check if the key matches the expected key in the sequence
        const expectedKey = konamiCode[konamiIndex];

        if (key.toLowerCase() === expectedKey.toLowerCase()) {
          // Move to the next key in the sequence
          konamiIndex++;
          updateSequenceDots();

          // If the entire sequence is entered correctly
          if (konamiIndex === konamiCode.length) {
            // Add a small delay so user can see the completed sequence
            setTimeout(() => {
              crashOut();
            }, 500);
          }
        } else {
          // Reset the sequence if a wrong key is pressed
          konamiIndex = 0;
          updateSequenceDots();
        }
      }

      // Setup controller trigger
      function setupControllerTrigger() {
        // Set up a mutation observer to watch for the controller trigger panel
        const observer = new MutationObserver((mutations) => {
          mutations.forEach((mutation) => {
            if (mutation.type === 'childList') {
              const triggerPanel = document.getElementById('controller-trigger-panel');
              if (triggerPanel && !triggerPanel.hasAttribute('data-controller-initialized')) {
                triggerPanel.addEventListener('click', () => {
                  // First close the FAQ window
                  closeWindow('faq');

                  // Play glitch sound
                  playSound('glitch');

                  // Then show the controller after a short delay
                  setTimeout(() => {
                    showController();
                  }, 350); // Slightly longer than the window closing animation (300ms)
                });
                triggerPanel.setAttribute('data-controller-initialized', 'true');
                triggerPanel.style.cursor = 'pointer';
                console.log('Controller trigger panel initialized');
              }
            }
          });
        });

        // Start observing the document body for changes
        observer.observe(document.body, { childList: true, subtree: true });
      }

      // Initialize controller buttons when DOM is loaded
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
          initControllerButtons();
          setupControllerTrigger();
        });
      } else {
        initControllerButtons();
        setupControllerTrigger();
      }
    }

    initKonamiCode();
  });
</script>

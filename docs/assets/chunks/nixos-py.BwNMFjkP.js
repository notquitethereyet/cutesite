import { c as createComponent, d as renderComponent, b as renderTemplate, u as unescapeHTML } from './astro/server.D6i8lyld.js';
import 'kleur/colors';
import { $ as $$BlogLayout } from './BlogLayout.CQqkBTXc.js';

const html = () => "<h1 id=\"python-on-nixos-a-guide-for-the-challenged\">Python on NixOS: A Guide for the Challenged</h1>\n<h2 id=\"introduction\">Introduction</h2>\n<p>Everyone and their mother uses NixOS now (Firebase and Railway too). Time to get to work and stack some paper since you spent your savings on that akasupa to the graduated VTuber(s) who you were parasocial for. So, you quickly install Python from the nixpkgs and then make your first import. The terminal shits out import errors from locations you never imagined existed on your system. WHAT THE HELL IS A NIX STORE!!! “Worked fine on my Arch install!!!”, you think. Buckle up rookie! I will what I wish I was told 8 months ago.</p>\n<p>My fella, do you need the method?</p>\n<p><img src=\"/cutesite/assets/blog/nixos-py/method.webp\" alt=\"vegeta\"></p>\n<p>Let’s go with the simplest way I know (the non-Nix route) and let’s set up a reproducible Python environment using Nix, uv. You’ll finally be able to hopefully get your money up and not just your funny up. This involves exposing system libraries to python packages in the nix shell.</p>\n<h3 id=\"prerequisites\">Prerequisites</h3>\n<ul>\n<li>NixOS installed (socially inept simulator)</li>\n<li>Your project <em>should</em> have a <code>requirements.txt</code>, and your Python source files (tf you doing here if you don’t).</li>\n</ul>\n<h2 id=\"using-nix-shell-and-uv\">Using nix-shell and uv</h2>\n<h3 id=\"step-0-create-a-shellnix-file\">Step 0: Create a <code>shell.nix</code> File</h3>\n<p>Create a <code>shell.nix</code> file in your project directory with the following content:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"nix\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">{ pkgs </span><span style=\"color:#F97583\">?</span><span style=\"color:#79B8FF\"> import</span><span style=\"color:#9ECBFF\"> &#x3C;nixpkgs></span><span style=\"color:#E1E4E8\"> {} }:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">pkgs</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">mkShell</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  packages</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> [</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    pkgs</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">python310</span><span style=\"color:#6A737D\"> # or whatever version you use</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    pkgs</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">uv</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    pkgs</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">stdenv</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">cc</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">cc</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  ];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  env</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">LD_LIBRARY_PATH</span><span style=\"color:#F97583\"> =</span><span style=\"color:#FFAB70\"> pkgs</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">lib</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">makeLibraryPath</span><span style=\"color:#E1E4E8\"> [</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    # these are the most common</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    pkgs</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">stdenv</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">cc</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">cc</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">lib</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    pkgs</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">zlib</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  ];</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<h3 id=\"step-1-enter-the-nix-shell\">Step 1: Enter the Nix Shell</h3>\n<p><img src=\"/cutesite/assets/blog/nixos-py/py1.webp\" alt=\"nix-shell\"></p>\n<div class=\"image-caption\">nix-shell</div>\n<p>Open your terminal in the project directory and type:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sh\"><code><span class=\"line\"><span style=\"color:#B392F0\">nix-shell</span></span></code></pre>\n<p>This loads a reproducible shell with Python and uv, as dictated by your <code>shell.nix</code>. If it fails, honestly, you are cooked.</p>\n<h3 id=\"step-2-create-and-activate-a-virtual-environment\">Step 2: Create and Activate a Virtual Environment</h3>\n<p><img src=\"/cutesite/assets/blog/nixos-py/py2.webp\" alt=\"uv venv\"></p>\n<div class=\"image-caption\">venv time</div>\n<p>Let uv cook:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sh\"><code><span class=\"line\"><span style=\"color:#B392F0\">uv</span><span style=\"color:#9ECBFF\"> venv</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">source</span><span style=\"color:#9ECBFF\"> .venv/bin/activate</span></span></code></pre>\n<p>If your prompt doesn’t change, it’s either working or it’s not (my zsh config is dogshit).</p>\n<h3 id=\"step-3-initialize-the-project-optional\">Step 3: Initialize the Project (Optional)</h3>\n<p>If you are chatgpt-ing the shit outta your projcet, you might get prompted to generate a <code>pyproject.toml</code>:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sh\"><code><span class=\"line\"><span style=\"color:#B392F0\">uv</span><span style=\"color:#9ECBFF\"> init</span></span></code></pre>\n<p>So much for industry practices.</p>\n<h3 id=\"step-4-install-dependencies\">Step 4: Install Dependencies</h3>\n<p><img src=\"/cutesite/assets/blog/nixos-py/py3.webp\" alt=\"uv add\"></p>\n<div class=\"image-caption\">uv doing its magic</div>\n<p>Time to summon your packages:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sh\"><code><span class=\"line\"><span style=\"color:#B392F0\">uv</span><span style=\"color:#9ECBFF\"> add</span><span style=\"color:#79B8FF\"> -r</span><span style=\"color:#9ECBFF\"> requirements.txt</span></span></code></pre>\n<p>This will (hopefully) resolve and install everything. If it doesn’t, check your <code>requirements.txt</code> for typos, or find the nix-tards on reddit.</p>\n<h3 id=\"step-5-run-your-python-application\">Step 5: Run Your Python Application</h3>\n<p><img src=\"/cutesite/assets/blog/nixos-py/py4.webp\" alt=\"workey\"></p>\n<div class=\"image-caption\">app runs hopefully</div>\n<p>Cross your heart and run the code:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sh\"><code><span class=\"line\"><span style=\"color:#B392F0\">uv</span><span style=\"color:#9ECBFF\"> run</span><span style=\"color:#9ECBFF\"> app.py</span></span></code></pre>\n<p>Or, if you’re feeling retro:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sh\"><code><span class=\"line\"><span style=\"color:#B392F0\">python</span><span style=\"color:#9ECBFF\"> app.py</span></span></code></pre>\n<p>Or if you just want to see something work:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sh\"><code><span class=\"line\"><span style=\"color:#B392F0\">python</span><span style=\"color:#9ECBFF\"> main.py</span></span></code></pre>\n<h2 id=\"using-nix-direnv\">Using nix-direnv</h2>\n<h3 id=\"step-0-create-a-shellnix-file-1\">Step 0: Create a <code>shell.nix</code> File</h3>\n<p>Create a <code>shell.nix</code> file in your project directory with the following content:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"nix\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">{ pkgs </span><span style=\"color:#F97583\">?</span><span style=\"color:#79B8FF\"> import</span><span style=\"color:#9ECBFF\"> &#x3C;nixpkgs></span><span style=\"color:#E1E4E8\"> {} }:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">pkgs</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">mkShell</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  buildInputs</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> with</span><span style=\"color:#FFAB70\"> pkgs</span><span style=\"color:#E1E4E8\">; [</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    python3</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    python3Packages</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">flask</span><span style=\"color:#6A737D\"> # whatever packages you need</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    python3Packages</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">flask-cors</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    python3Packages</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">pandas</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    python3Packages</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">numpy</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    python3Packages</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">openpyxl</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    python3Packages</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">requests</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    python3Packages</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">python-dotenv</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    python3Packages</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">gunicorn</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    python3Packages</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">werkzeug</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    python3Packages</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">pytz</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    python3Packages</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">eventlet</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    python3Packages</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">gevent</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    python3Packages</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">flask-socketio</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  ];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  # shellHook = ''</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  #   echo \"Python Flask environment activated!\"</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  #   echo \"Run 'flask run' to start the development server\"</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  #   echo \"Run 'gunicorn app:app --bind 0.0.0.0:\\$PORT' for production\"</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  # '';</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<h3 id=\"step-1-install-direnv\">Step 1: Install direnv</h3>\n<p>For NixOS 23.05+, add this to your <code>configuration.nix</code>:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"nix\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">{ pkgs</span><span style=\"color:#F97583\">,</span><span style=\"color:#F97583\"> ... </span><span style=\"color:#E1E4E8\">}: {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  #set to default values</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  programs</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">direnv</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">    package</span><span style=\"color:#F97583\"> =</span><span style=\"color:#FFAB70\"> pkgs</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">direnv</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">    silent</span><span style=\"color:#F97583\"> =</span><span style=\"color:#79B8FF\"> false</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">    loadInNixShell</span><span style=\"color:#F97583\"> =</span><span style=\"color:#79B8FF\"> true</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">    direnvrcExtra</span><span style=\"color:#F97583\"> =</span><span style=\"color:#9ECBFF\"> \"\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">    nix-direnv</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">      enable</span><span style=\"color:#F97583\"> =</span><span style=\"color:#79B8FF\"> true</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">      package</span><span style=\"color:#F97583\"> =</span><span style=\"color:#FFAB70\"> pkgs</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">nix-direnv</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    };</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }</span></span></code></pre>\n<h3 id=\"step-2-enable-direnv-in-your-project-directory\">Step 2: Enable direnv in your project directory</h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sh\"><code><span class=\"line\"><span style=\"color:#B392F0\">$</span><span style=\"color:#9ECBFF\"> echo</span><span style=\"color:#9ECBFF\"> \"use nix\"</span><span style=\"color:#F97583\"> >></span><span style=\"color:#9ECBFF\"> .envrc</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">$</span><span style=\"color:#9ECBFF\"> direnv</span><span style=\"color:#9ECBFF\"> allow</span></span></code></pre>\n<h3 id=\"step-3-run-your-python-application\">Step 3: Run your Python application</h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sh\"><code><span class=\"line\"><span style=\"color:#B392F0\">$</span><span style=\"color:#9ECBFF\"> python</span><span style=\"color:#9ECBFF\"> app.py</span></span></code></pre>\n<h2 id=\"troubleshooting\">Troubleshooting</h2>\n<ul>\n<li>Make sure you are in NixOS</li>\n<li>Make sure your keyboard is connected (HHKBs work best in my testing)</li>\n<li>Is your monitor on?</li>\n<li>Make sure you’re in the nix-shell and virtual environment before installing or running code.</li>\n<li>If dependencies fail to install, check your <code>requirements.txt</code> and Python version. Or try turning it off and on again.</li>\n<li>Still broken? Wallahi your bloodline is finished with you and your ancestors weep in shame.</li>\n</ul>\n<p>Congrats! You’ve now set up Python on the autism simulator that is NixOS. Go forth and break something new!</p>\n<p>Cheers! <br>\nquiet🌸</p>";

				const frontmatter = {"title":"Python on NixOS","description":"Using nix shell to make python useable on NixOS","date":"2025-04-20T00:00:00.000Z","tags":["linux","nixos","python"],"layout":"../../layouts/BlogLayout.astro"};
				const file = "/Users/quiet/Documents/Workspace/cutesite/src/pages/posts/nixos-py.md";
				const url = "/posts/nixos-py";
				function rawContent() {
					return "   \n                        \n                                                              \n                \n                                  \n                                      \n   \n\n# Python on NixOS: A Guide for the Challenged\n\n\n## Introduction\n\nEveryone and their mother uses NixOS now (Firebase and Railway too). Time to get to work and stack some paper since you spent your savings on that akasupa to the graduated VTuber(s) who you were parasocial for. So, you quickly install Python from the nixpkgs and then make your first import. The terminal shits out import errors from locations you never imagined existed on your system. WHAT THE HELL IS A NIX STORE!!! \"Worked fine on my Arch install!!!\", you think. Buckle up rookie! I will what I wish I was told 8 months ago.\n\n\nMy fella, do you need the method?\n\n![vegeta](/cutesite/assets/blog/nixos-py/method.webp)\n\nLet's go with the simplest way I know (the non-Nix route) and let's set up a reproducible Python environment using Nix, uv. You’ll finally be able to hopefully get your money up and not just your funny up. This involves exposing system libraries to python packages in the nix shell.\n\n\n### Prerequisites\n\n- NixOS installed (socially inept simulator)\n- Your project *should* have a `requirements.txt`, and your Python source files (tf you doing here if you don’t).\n## Using nix-shell and uv\n\n### Step 0: Create a `shell.nix` File\n\nCreate a `shell.nix` file in your project directory with the following content:\n```nix\n{ pkgs ? import <nixpkgs> {} }:\n\npkgs.mkShell {\n\n  packages = [\n    pkgs.python310 # or whatever version you use\n    pkgs.uv\n    pkgs.stdenv.cc.cc\n  ];\n\n  env.LD_LIBRARY_PATH = pkgs.lib.makeLibraryPath [\n    # these are the most common\n    pkgs.stdenv.cc.cc.lib\n    pkgs.zlib\n  ];\n}\n```\n\n### Step 1: Enter the Nix Shell\n\n\n\n![nix-shell](/cutesite/assets/blog/nixos-py/py1.webp)\n<div class=\"image-caption\">nix-shell</div>\n\nOpen your terminal in the project directory and type:\n\n```sh\nnix-shell\n```\n\nThis loads a reproducible shell with Python and uv, as dictated by your `shell.nix`. If it fails, honestly, you are cooked.\n\n\n\n### Step 2: Create and Activate a Virtual Environment\n\n![uv venv](/cutesite/assets/blog/nixos-py/py2.webp)\n<div class=\"image-caption\">venv time</div>\n\nLet uv cook:\n\n```sh\nuv venv\nsource .venv/bin/activate\n```\n\nIf your prompt doesn’t change, it’s either working or it's not (my zsh config is dogshit).\n\n\n\n### Step 3: Initialize the Project (Optional)\n\nIf you are chatgpt-ing the shit outta your projcet, you might get prompted to generate a `pyproject.toml`:\n\n```sh\nuv init\n```\n\nSo much for industry practices. \n\n\n### Step 4: Install Dependencies\n\n\n![uv add](/cutesite/assets/blog/nixos-py/py3.webp)\n<div class=\"image-caption\">uv doing its magic</div>\n\n\nTime to summon your packages:\n\n```sh\nuv add -r requirements.txt\n```\n\nThis will (hopefully) resolve and install everything. If it doesn’t, check your `requirements.txt` for typos, or find the nix-tards on reddit.\n\n\n\n### Step 5: Run Your Python Application\n\n![workey](/cutesite/assets/blog/nixos-py/py4.webp)\n<div class=\"image-caption\">app runs hopefully</div>\n\nCross your heart and run the code:\n\n```sh\nuv run app.py\n```\n\nOr, if you’re feeling retro:\n\n```sh\npython app.py\n```\n\nOr if you just want to see something work:\n\n```sh\npython main.py\n```\n\n## Using nix-direnv\n\n### Step 0: Create a `shell.nix` File\n\nCreate a `shell.nix` file in your project directory with the following content:\n```nix\n{ pkgs ? import <nixpkgs> {} }:\n\npkgs.mkShell {\n  buildInputs = with pkgs; [\n    python3\n    python3Packages.flask # whatever packages you need\n    python3Packages.flask-cors\n    python3Packages.pandas\n    python3Packages.numpy\n    python3Packages.openpyxl\n    python3Packages.requests\n    python3Packages.python-dotenv\n    python3Packages.gunicorn\n    python3Packages.werkzeug\n    python3Packages.pytz\n    python3Packages.eventlet\n    python3Packages.gevent\n    python3Packages.flask-socketio\n  ];\n\n  # shellHook = ''\n  #   echo \"Python Flask environment activated!\"\n  #   echo \"Run 'flask run' to start the development server\"\n  #   echo \"Run 'gunicorn app:app --bind 0.0.0.0:\\$PORT' for production\"\n  # '';\n}\n```\n\n### Step 1: Install direnv\nFor NixOS 23.05+, add this to your `configuration.nix`:\n\n```nix\n{ pkgs, ... }: {\n  #set to default values\n  programs.direnv = {\n    package = pkgs.direnv;\n    silent = false;\n    loadInNixShell = true;\n    direnvrcExtra = \"\";\n    nix-direnv = {\n      enable = true;\n      package = pkgs.nix-direnv;\n    };\n  }\n```\n\n### Step 2: Enable direnv in your project directory\n```sh\n$ echo \"use nix\" >> .envrc\n$ direnv allow\n```\n\n### Step 3: Run your Python application\n```sh\n$ python app.py\n```\n\n\n## Troubleshooting\n- Make sure you are in NixOS\n- Make sure your keyboard is connected (HHKBs work best in my testing)\n- Is your monitor on?\n- Make sure you’re in the nix-shell and virtual environment before installing or running code. \n- If dependencies fail to install, check your `requirements.txt` and Python version. Or try turning it off and on again.\n- Still broken? Wallahi your bloodline is finished with you and your ancestors weep in shame.\n\nCongrats! You’ve now set up Python on the autism simulator that is NixOS. Go forth and break something new!\n\n\nCheers! <br>\nquiet🌸\n";
				}
				async function compiledContent() {
					return await html();
				}
				function getHeadings() {
					return [{"depth":1,"slug":"python-on-nixos-a-guide-for-the-challenged","text":"Python on NixOS: A Guide for the Challenged"},{"depth":2,"slug":"introduction","text":"Introduction"},{"depth":3,"slug":"prerequisites","text":"Prerequisites"},{"depth":2,"slug":"using-nix-shell-and-uv","text":"Using nix-shell and uv"},{"depth":3,"slug":"step-0-create-a-shellnix-file","text":"Step 0: Create a shell.nix File"},{"depth":3,"slug":"step-1-enter-the-nix-shell","text":"Step 1: Enter the Nix Shell"},{"depth":3,"slug":"step-2-create-and-activate-a-virtual-environment","text":"Step 2: Create and Activate a Virtual Environment"},{"depth":3,"slug":"step-3-initialize-the-project-optional","text":"Step 3: Initialize the Project (Optional)"},{"depth":3,"slug":"step-4-install-dependencies","text":"Step 4: Install Dependencies"},{"depth":3,"slug":"step-5-run-your-python-application","text":"Step 5: Run Your Python Application"},{"depth":2,"slug":"using-nix-direnv","text":"Using nix-direnv"},{"depth":3,"slug":"step-0-create-a-shellnix-file-1","text":"Step 0: Create a shell.nix File"},{"depth":3,"slug":"step-1-install-direnv","text":"Step 1: Install direnv"},{"depth":3,"slug":"step-2-enable-direnv-in-your-project-directory","text":"Step 2: Enable direnv in your project directory"},{"depth":3,"slug":"step-3-run-your-python-application","text":"Step 3: Run your Python application"},{"depth":2,"slug":"troubleshooting","text":"Troubleshooting"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$BlogLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html())}`
							})}`;
				});

const __vite_glob_0_1 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content,
	compiledContent,
	default: Content,
	file,
	frontmatter,
	getHeadings,
	rawContent,
	url
}, Symbol.toStringTag, { value: 'Module' }));

export { __vite_glob_0_1 as _ };

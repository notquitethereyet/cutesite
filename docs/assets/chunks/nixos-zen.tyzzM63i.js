import { c as createComponent, d as renderComponent, b as renderTemplate, u as unescapeHTML } from './astro/server.D6i8lyld.js';
import 'kleur/colors';
import { $ as $$BlogLayout } from './BlogLayout.CQqkBTXc.js';

const html = () => "<h1 id=\"installing-zen-browser-on-nixos-️\">Installing Zen Browser on NixOS ❄️</h1>\n<p><strong>quiet</strong></p>\n<h2 id=\"introduction\">Introduction</h2>\n<p>We all know Linux users. We either spend the rest of our lives wasting away on Debian or take the redpill and jump into more adventurous distros like Arch and Gentoo. I am the latter. Spending days trying to figure out what broke my Arch distro while dealing with work deadlines and grad school projects, I am convinced that I am a masochistic autist. But lately, I felt Arch has been a bit too stable for me. My last install broke due to a user error where I installed an incompatible kernel and my initramfs was confused. This won’t do! So of course, I did what most normal people would do. I bought a used ThinkPad T480s from eBay for a measly $90 to dip my toes into the “new Arch” distro, NixOS!</p>\n<h2 id=\"nixos-flakes-and-home-manager\">NixOS, flakes and home-manager</h2>\n<p><img src=\"/cutesite/assets/blog/nixos-zen/nixchan.webp\" alt=\"NixChan from assets\"></p>\n<div class=\"image-caption\">nixchan is the unofficial NixOS mascot</div>\n<p>NixOS is truly amazingly mind-boggling. When I learnt that this was Eelco Dolstra’s PhD thesis on “correct software deployment”, this simultaneously intrigued me and made me have an existential crisis (whenever I see someone my age be incredibly talented, it bums me tf out). NixOS is lauded for its modularity, reproducibility and something else I can not remember, nor can I be bothered to look up.</p>\n<p>If you want a quick NixOS setup and you don’t want to bother watching dozens of hours of Vimoyer’s NixOS videos, be sure to check out Fernando Borretti’s quick install guide!</p>\n<p>If you have looked up info on Nix, you probably know you could imperatively install anything on Nix just like on Arch:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sh\"><code><span class=\"line\"><span style=\"color:#B392F0\">nix-shell</span><span style=\"color:#79B8FF\"> -p</span><span style=\"color:#F97583\"> &#x3C;</span><span style=\"color:#9ECBFF\">package</span><span style=\"color:#9ECBFF\"> nam</span><span style=\"color:#E1E4E8\">e</span><span style=\"color:#F97583\">></span></span></code></pre>\n<p>which is basically the NixOS counterpart of Arch’s incredibly convenient</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sh\"><code><span class=\"line\"><span style=\"color:#B392F0\">sudo</span><span style=\"color:#9ECBFF\"> pacman</span><span style=\"color:#79B8FF\"> -S</span><span style=\"color:#F97583\"> &#x3C;</span><span style=\"color:#9ECBFF\">package</span><span style=\"color:#9ECBFF\"> nam</span><span style=\"color:#E1E4E8\">e</span><span style=\"color:#F97583\">></span></span></code></pre>\n<p>But we are on NixOS! We want to do stuff the Nix way! We want to declaratively install packages! Even if they don’t exist in the official NixOS package repo!</p>\n<p>Let’s proceed to what is really important. Nix is a very versatile language; no two configs will be similar! It is very important to understand the basics of the language to efficiently write your configs. This can take weeks or even months to completely ingrain in my noggin. But I don’t got no time for that stuff! So, I did the next best thing; copy my friend’s config :) (Thanks draff).</p>\n<p>My <code>flake.nix</code> and <code>home.nix</code> probably look different than yours, that’s because I have followed Drake Rossman’s immaculate guide on setting up home-manager as a module (I want my home-manager to rebuild alongside NixOS cuz it’s just more convenient and I am a lazy bum). Also I moved everything inside <code>/etc/nixos</code> to <code>/home/quiet/Documents/nixos</code> and symlinked them to the original folder so I can edit them as user without root.</p>\n<p>The two important lines I’d recommend adding to <code>configuration.nix</code> are:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"nix\"><code><span class=\"line\"><span style=\"color:#FFAB70\">nix</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">settings</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">experimental-features</span><span style=\"color:#FDAEB7;font-style:italic\"> =</span><span style=\"color:#E1E4E8\"> [</span><span style=\"color:#9ECBFF\">\"nix-command\"</span><span style=\"color:#9ECBFF\"> \"flakes\"</span><span style=\"color:#E1E4E8\">]</span><span style=\"color:#FDAEB7;font-style:italic\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">environment</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">systemPackages</span><span style=\"color:#FDAEB7;font-style:italic\"> =</span><span style=\"color:#FDAEB7;font-style:italic\"> with</span><span style=\"color:#FFAB70\"> pkgs</span><span style=\"color:#FDAEB7;font-style:italic\">;</span><span style=\"color:#79B8FF\"> import</span><span style=\"color:#9ECBFF\"> ./packages.nix</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">inherit</span><span style=\"color:#B392F0\"> pkgs</span><span style=\"color:#E1E4E8\">; }</span><span style=\"color:#FDAEB7;font-style:italic\">;</span></span></code></pre>\n<p>Now I can keep the <code>configuration.nix</code> file clean and declare my system packages in <code>packages.nix</code> like such:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"nix\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">{ pkgs</span><span style=\"color:#F97583\">,</span><span style=\"color:#FDAEB7;font-style:italic\"> …</span><span style=\"color:#E1E4E8\"> }:</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">with</span><span style=\"color:#FFAB70\"> pkgs</span><span style=\"color:#E1E4E8\">; [</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">  vim</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">  git</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">  kitty</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  # and so on</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">]</span></span></code></pre>\n<p>This is my <code>flake.nix</code>:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"nix\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  description</span><span style=\"color:#F97583\"> =</span><span style=\"color:#9ECBFF\"> \"A very basic flake\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  inputs</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">    nixpkgs</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">url</span><span style=\"color:#F97583\"> =</span><span style=\"color:#9ECBFF\"> \"github:nixos/nixpkgs?ref=nixos-unstable\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">    hyprland</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">url</span><span style=\"color:#F97583\"> =</span><span style=\"color:#9ECBFF\"> \"github:hyprwm/Hyprland\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">    catppuccin</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">url</span><span style=\"color:#F97583\"> =</span><span style=\"color:#9ECBFF\"> \"github:catppuccin/nix\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">    zen-browser</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">url</span><span style=\"color:#F97583\"> =</span><span style=\"color:#9ECBFF\"> \"github:0xc000022070/zen-browser-flake\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">    home-manager</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">      url</span><span style=\"color:#F97583\"> =</span><span style=\"color:#9ECBFF\"> \"github:nix-community/home-manager\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">      inputs</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">nixpkgs</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">follows</span><span style=\"color:#F97583\"> =</span><span style=\"color:#9ECBFF\"> \"nixpkgs\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    };</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  outputs</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> { nixpkgs</span><span style=\"color:#F97583\">,</span><span style=\"color:#E1E4E8\"> catppuccin</span><span style=\"color:#F97583\">,</span><span style=\"color:#E1E4E8\"> home-manager</span><span style=\"color:#F97583\">,</span><span style=\"color:#E1E4E8\"> zen-browser</span><span style=\"color:#F97583\">,</span><span style=\"color:#F97583\"> ... </span><span style=\"color:#E1E4E8\">} @ inputs:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  {</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">    nixosConfigurations</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">nixchan</span><span style=\"color:#F97583\"> =</span><span style=\"color:#FFAB70\"> nixpkgs</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">lib</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">nixosSystem</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">      system</span><span style=\"color:#F97583\"> =</span><span style=\"color:#9ECBFF\"> \"x86_64-linux\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">      specialArgs</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">inherit</span><span style=\"color:#B392F0\"> inputs</span><span style=\"color:#E1E4E8\">; };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B392F0\">      modules</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> [</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">        ./configuration.nix</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">        ./hyprland.nix</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">        ./fonts.nix</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">        catppuccin</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">nixosModules</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">catppuccin</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">        home-manager</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">nixosModules</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">home-manager</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        {</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">          home-manager</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">useGlobalPkgs</span><span style=\"color:#F97583\"> =</span><span style=\"color:#79B8FF\"> true</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">          home-manager</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">backupFileExtension</span><span style=\"color:#F97583\"> =</span><span style=\"color:#9ECBFF\"> \"HMBackup\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">          home-manager</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">useUserPackages</span><span style=\"color:#F97583\"> =</span><span style=\"color:#79B8FF\"> true</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">          home-manager</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">users</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">quiet</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">imports</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> [</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">            ./home.nix</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">            catppuccin</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">homeManagerModules</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">catppuccin</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">          ];</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">          home-manager</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">extraSpecialArgs</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">inherit</span><span style=\"color:#B392F0\"> inputs</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#B392F0\">system</span><span style=\"color:#F97583\"> =</span><span style=\"color:#9ECBFF\"> \"x86_64-linux\"</span><span style=\"color:#E1E4E8\">; };</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      ];</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    };</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  };</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<p>The key line here is to add the following line to your flake inputs:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"nix\"><code><span class=\"line\"><span style=\"color:#FFAB70\">zen-browser</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">url</span><span style=\"color:#FDAEB7;font-style:italic\"> =</span><span style=\"color:#9ECBFF\"> \"github:0xc000022070/zen-browser-flake\"</span><span style=\"color:#FDAEB7;font-style:italic\">;</span></span></code></pre>\n<p>Let’s look at my <code>home.nix</code>:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"nix\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">{ config</span><span style=\"color:#F97583\">,</span><span style=\"color:#E1E4E8\"> pkgs</span><span style=\"color:#F97583\">,</span><span style=\"color:#E1E4E8\"> system</span><span style=\"color:#F97583\">,</span><span style=\"color:#E1E4E8\"> inputs</span><span style=\"color:#F97583\">,</span><span style=\"color:#F97583\"> ... </span><span style=\"color:#E1E4E8\">}:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  home</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">username</span><span style=\"color:#F97583\"> =</span><span style=\"color:#9ECBFF\"> \"quiet\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  home</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">homeDirectory</span><span style=\"color:#F97583\"> =</span><span style=\"color:#9ECBFF\"> \"/home/quiet\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  # Packages that should be installed to the user profile.</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  home</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">packages</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> with</span><span style=\"color:#FFAB70\"> pkgs</span><span style=\"color:#E1E4E8\">; [</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    zip</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    xz</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    unzip</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    p7zip</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    oh-my-zsh</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    oh-my-posh</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    inputs</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">zen-browser</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">packages</span><span style=\"color:#F97583\">.</span><span style=\"color:#9ECBFF\">\"</span><span style=\"color:#9ECBFF\">${</span><span style=\"color:#79B8FF\">system</span><span style=\"color:#9ECBFF\">}</span><span style=\"color:#9ECBFF\">\"</span><span style=\"color:#F97583\">.</span><span style=\"color:#FFAB70\">specific</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  ];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  # basic configuration of git, please change to your own</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  programs</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">git</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">    enable</span><span style=\"color:#F97583\"> =</span><span style=\"color:#79B8FF\"> true</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">    userName</span><span style=\"color:#F97583\"> =</span><span style=\"color:#9ECBFF\"> \"notquitethereyet\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">    userEmail</span><span style=\"color:#F97583\"> =</span><span style=\"color:#9ECBFF\"> \"example@example.com\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">    extraConfig</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">      init</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">defaultBranch</span><span style=\"color:#F97583\"> =</span><span style=\"color:#9ECBFF\"> \"main\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    };</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  # Catpussy thing</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  catppuccin</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">    enable</span><span style=\"color:#F97583\"> =</span><span style=\"color:#79B8FF\"> true</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">    flavor</span><span style=\"color:#F97583\"> =</span><span style=\"color:#9ECBFF\"> \"mocha\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">    accent</span><span style=\"color:#F97583\"> =</span><span style=\"color:#9ECBFF\"> \"blue\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  # This value determines the home Manager release that your</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  # configuration is compatible with. This helps avoid breakage</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  # when a new home Manager release introduces backwards</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  # incompatible changes.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  #</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  # You can update home Manager without changing this value. See</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  # the home Manager release notes for a list of state version</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  # changes in each release.</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  home</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">stateVersion</span><span style=\"color:#F97583\"> =</span><span style=\"color:#9ECBFF\"> \"23.11\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  # Let home Manager install and manage itself.</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  programs</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">home-manager</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">enable</span><span style=\"color:#F97583\"> =</span><span style=\"color:#79B8FF\"> true</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<p>If you don’t want to pass in your system from <code>flake.nix</code>, you could also declare it as a variable in <code>home.nix</code> as such:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"nix\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">{ config</span><span style=\"color:#F97583\">,</span><span style=\"color:#E1E4E8\"> pkgs</span><span style=\"color:#F97583\">,</span><span style=\"color:#E1E4E8\"> system</span><span style=\"color:#F97583\">,</span><span style=\"color:#E1E4E8\"> inputs</span><span style=\"color:#F97583\">,</span><span style=\"color:#F97583\"> ... </span><span style=\"color:#E1E4E8\">}:</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">let</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  system</span><span style=\"color:#F97583\"> =</span><span style=\"color:#9ECBFF\"> \"x86_64-linux\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">in</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  home</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">username</span><span style=\"color:#F97583\"> =</span><span style=\"color:#9ECBFF\"> \"quiet\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  home</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">homeDirectory</span><span style=\"color:#F97583\"> =</span><span style=\"color:#9ECBFF\"> \"/home/quiet\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  ## rest of home.nix</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<p>Now, all we gotta do is rebuild the system!</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sh\"><code><span class=\"line\"><span style=\"color:#B392F0\">sudo</span><span style=\"color:#9ECBFF\"> nixos-rebuild</span><span style=\"color:#9ECBFF\"> switch</span></span></code></pre>\n<p>Voila! Now you have Walmart version of Arc Browser installed on your NixOS system (I kid! I prefer Zen over Arc because it’s based on Firefox and not Chromium).</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>For the impatient who can not wait for Zen Browser to be added to the NixOS packages, this can let us install Zen from a stranger’s flake on github!\nThis is a godsend for folks who don’t want to compile it from source (my ThinkPad took 3 hours to compile it, I think. And what’s worse? It immediately got an update!). So thanks to the maintainer who did it for us!</p>\n<p>Keep in mind that running random flakes can be a security compromise! This is not a guide per se and more like “I wish this existed when I was trying to do it” for myself and people like me who lack reading comprehension and can not simply “RTFM” like my fellow Arch users like to say.</p>\n<p>Also, I know GNU/Linux users do not like casuals like me who just want their systems to work and not spend 6 hours finding out why something does not work. I am impatient and am just concerned with the how to make it work part. I apologize in advance and do not intend any offense. I just wanted to jump the Windows (or bimbos as I call it) ship and never look back! So please direct your death threats and angry complaints to either my email, or my twitter (my ass is not calling it X).</p>\n<p>Also, my big-dawg is currently being hospitalized for subdural hematoma and subarachnoid hemorrhage. He has much to do in this world still. Keep him in your prayers and pray for his recovery.</p>\n<p>Cheers! <br>\nquiet🌸</p>";

				const frontmatter = {"title":"Zen Browser on NixOS","description":"Installing Zen Browser using a flake on NixOS","date":"2024-11-15T00:00:00.000Z","tags":["linux","nixos","configuration"],"layout":"../../layouts/BlogLayout.astro"};
				const file = "/Users/quiet/Documents/Workspace/cutesite/src/pages/posts/nixos-zen.md";
				const url = "/posts/nixos-zen";
				function rawContent() {
					return "   \n                             \n                                                            \n                \n                                         \n                                      \n   \n\n# Installing Zen Browser on NixOS ❄️\n\n**quiet**\n\n\n\n## Introduction\n\nWe all know Linux users. We either spend the rest of our lives wasting away on Debian or take the redpill and jump into more adventurous distros like Arch and Gentoo. I am the latter. Spending days trying to figure out what broke my Arch distro while dealing with work deadlines and grad school projects, I am convinced that I am a masochistic autist. But lately, I felt Arch has been a bit too stable for me. My last install broke due to a user error where I installed an incompatible kernel and my initramfs was confused. This won’t do! So of course, I did what most normal people would do. I bought a used ThinkPad T480s from eBay for a measly $90 to dip my toes into the “new Arch” distro, NixOS!\n\n\n\n## NixOS, flakes and home-manager\n\n![NixChan from assets](/cutesite/assets/blog/nixos-zen/nixchan.webp)\n<div class=\"image-caption\">nixchan is the unofficial NixOS mascot</div>\n\nNixOS is truly amazingly mind-boggling. When I learnt that this was Eelco Dolstra’s PhD thesis on “correct software deployment”, this simultaneously intrigued me and made me have an existential crisis (whenever I see someone my age be incredibly talented, it bums me tf out). NixOS is lauded for its modularity, reproducibility and something else I can not remember, nor can I be bothered to look up.\n\nIf you want a quick NixOS setup and you don't want to bother watching dozens of hours of Vimoyer’s NixOS videos, be sure to check out Fernando Borretti’s quick install guide!\n\nIf you have looked up info on Nix, you probably know you could imperatively install anything on Nix just like on Arch:\n\n```sh\nnix-shell -p <package name>\n```\n\nwhich is basically the NixOS counterpart of Arch’s incredibly convenient\n\n```sh\nsudo pacman -S <package name>\n```\n\nBut we are on NixOS! We want to do stuff the Nix way! We want to declaratively install packages! Even if they don’t exist in the official NixOS package repo!\n\nLet’s proceed to what is really important. Nix is a very versatile language; no two configs will be similar! It is very important to understand the basics of the language to efficiently write your configs. This can take weeks or even months to completely ingrain in my noggin. But I don’t got no time for that stuff! So, I did the next best thing; copy my friend’s config :) (Thanks draff).\n\nMy `flake.nix` and `home.nix` probably look different than yours, that’s because I have followed Drake Rossman’s immaculate guide on setting up home-manager as a module (I want my home-manager to rebuild alongside NixOS cuz it’s just more convenient and I am a lazy bum). Also I moved everything inside `/etc/nixos` to `/home/quiet/Documents/nixos` and symlinked them to the original folder so I can edit them as user without root.\n\nThe two important lines I’d recommend adding to `configuration.nix` are:\n\n```nix\nnix.settings.experimental-features = [\"nix-command\" \"flakes\"];\nenvironment.systemPackages = with pkgs; import ./packages.nix { inherit pkgs; };\n```\n\nNow I can keep the `configuration.nix` file clean and declare my system packages in `packages.nix` like such:\n\n```nix\n{ pkgs, … }:\nwith pkgs; [\n  vim\n  git\n  kitty\n  # and so on\n]\n```\n\nThis is my `flake.nix`:\n\n```nix\n{\n  description = \"A very basic flake\";\n\n  inputs = {\n    nixpkgs.url = \"github:nixos/nixpkgs?ref=nixos-unstable\";\n    hyprland.url = \"github:hyprwm/Hyprland\";\n    catppuccin.url = \"github:catppuccin/nix\";\n    zen-browser.url = \"github:0xc000022070/zen-browser-flake\";\n    home-manager = {\n      url = \"github:nix-community/home-manager\";\n      inputs.nixpkgs.follows = \"nixpkgs\";\n    };\n  };\n\n  outputs = { nixpkgs, catppuccin, home-manager, zen-browser, ... } @ inputs:\n  {\n    nixosConfigurations.nixchan = nixpkgs.lib.nixosSystem {\n      system = \"x86_64-linux\";\n      specialArgs = { inherit inputs; };\n\n      modules = [\n        ./configuration.nix\n        ./hyprland.nix\n        ./fonts.nix\n        catppuccin.nixosModules.catppuccin\n        home-manager.nixosModules.home-manager\n        {\n          home-manager.useGlobalPkgs = true;\n          home-manager.backupFileExtension = \"HMBackup\";\n          home-manager.useUserPackages = true;\n          home-manager.users.quiet.imports = [\n            ./home.nix\n            catppuccin.homeManagerModules.catppuccin\n          ];\n          home-manager.extraSpecialArgs = { inherit inputs; system = \"x86_64-linux\"; };\n        }\n      ];\n    };\n  };\n}\n```\n\nThe key line here is to add the following line to your flake inputs:\n\n```nix\nzen-browser.url = \"github:0xc000022070/zen-browser-flake\";\n```\n\nLet’s look at my `home.nix`:\n\n```nix\n{ config, pkgs, system, inputs, ... }:\n\n{\n  home.username = \"quiet\";\n  home.homeDirectory = \"/home/quiet\";\n\n  # Packages that should be installed to the user profile.\n  home.packages = with pkgs; [\n    zip\n    xz\n    unzip\n    p7zip\n    oh-my-zsh\n    oh-my-posh\n    inputs.zen-browser.packages.\"${system}\".specific\n  ];\n\n  # basic configuration of git, please change to your own\n  programs.git = {\n    enable = true;\n    userName = \"notquitethereyet\";\n    userEmail = \"example@example.com\";\n    extraConfig = {\n      init.defaultBranch = \"main\";\n    };\n  };\n\n  # Catpussy thing\n  catppuccin = {\n    enable = true;\n    flavor = \"mocha\";\n    accent = \"blue\";\n  };\n\n  # This value determines the home Manager release that your\n  # configuration is compatible with. This helps avoid breakage\n  # when a new home Manager release introduces backwards\n  # incompatible changes.\n  #\n  # You can update home Manager without changing this value. See\n  # the home Manager release notes for a list of state version\n  # changes in each release.\n  home.stateVersion = \"23.11\";\n\n  # Let home Manager install and manage itself.\n  programs.home-manager.enable = true;\n}\n```\n\nIf you don’t want to pass in your system from `flake.nix`, you could also declare it as a variable in `home.nix` as such:\n\n```nix\n{ config, pkgs, system, inputs, ... }:\nlet\n  system = \"x86_64-linux\";\nin\n{\n  home.username = \"quiet\";\n  home.homeDirectory = \"/home/quiet\";\n  ## rest of home.nix\n}\n```\n\nNow, all we gotta do is rebuild the system!\n\n```sh\nsudo nixos-rebuild switch\n```\n\nVoila! Now you have Walmart version of Arc Browser installed on your NixOS system (I kid! I prefer Zen over Arc because it’s based on Firefox and not Chromium).\n\n\n\n## Conclusion\n\nFor the impatient who can not wait for Zen Browser to be added to the NixOS packages, this can let us install Zen from a stranger’s flake on github!\nThis is a godsend for folks who don’t want to compile it from source (my ThinkPad took 3 hours to compile it, I think. And what’s worse? It immediately got an update!). So thanks to the maintainer who did it for us!\n\nKeep in mind that running random flakes can be a security compromise! This is not a guide per se and more like “I wish this existed when I was trying to do it” for myself and people like me who lack reading comprehension and can not simply “RTFM” like my fellow Arch users like to say.\n\nAlso, I know GNU/Linux users do not like casuals like me who just want their systems to work and not spend 6 hours finding out why something does not work. I am impatient and am just concerned with the how to make it work part. I apologize in advance and do not intend any offense. I just wanted to jump the Windows (or bimbos as I call it) ship and never look back! So please direct your death threats and angry complaints to either my email, or my twitter (my ass is not calling it X).\n\nAlso, my big-dawg is currently being hospitalized for subdural hematoma and subarachnoid hemorrhage. He has much to do in this world still. Keep him in your prayers and pray for his recovery.\n\nCheers! <br>\nquiet🌸\n";
				}
				async function compiledContent() {
					return await html();
				}
				function getHeadings() {
					return [{"depth":1,"slug":"installing-zen-browser-on-nixos-️","text":"Installing Zen Browser on NixOS ❄️"},{"depth":2,"slug":"introduction","text":"Introduction"},{"depth":2,"slug":"nixos-flakes-and-home-manager","text":"NixOS, flakes and home-manager"},{"depth":2,"slug":"conclusion","text":"Conclusion"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$BlogLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html())}`
							})}`;
				});

const __vite_glob_0_2 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content,
	compiledContent,
	default: Content,
	file,
	frontmatter,
	getHeadings,
	rawContent,
	url
}, Symbol.toStringTag, { value: 'Module' }));

export { __vite_glob_0_2 as _ };
